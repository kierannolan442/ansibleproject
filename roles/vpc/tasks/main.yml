---
# Creating the VPC
- name: Create - Ansible VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: "present"
  register: project_vpc

- name: Output - Ansible VPC
  set_fact:
    vpc_id: "{{ project_vpc.vpc.id }}"

#Availability Zone A subnets
- name: Create - Public Subnet A
  ec2_vpc_subnet:
    state: "present"
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ public_subnet_a_cidr }}"
    region: "{{ aws_region }}"
    az: "{{ aws_region }}a"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    resource_tags:
      Name: "Public Subnet A"
  register: public_subnet_a

- name: Output - Public Subnet A
  set_fact:
    public_subnet_a_id: "{{ public_subnet_a.subnet.id }}"

- name: Create - Private Subnet A
  ec2_vpc_subnet:
    state: "present"
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ private_subnet_a_cidr }}"
    region: "{{ aws_region }}"
    az: "{{ aws_region }}a"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    resource_tags:
      Name: "Private Subnet A"
  register: private_subnet_a

- name: Output - Private Subnet A
  set_fact:
    private_subnet_a_id: "{{ private_subnet_a.subnet.id }}"

#Availability Zone B Subnets
- name: Create - Public Subnet B
  ec2_vpc_subnet:
    state: "present"
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ public_subnet_b_cidr }}"
    region: "{{ aws_region }}"
    az: "{{ aws_region }}b"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    resource_tags:
      Name: "Public Subnet B"
  register: public_subnet_b

- name: Output - Public subnet B
  set_fact:
    public_subnet_b_id: "{{ public_subnet_b.subnet.id }}"

- name: Create - Private Subnet B
  ec2_vpc_subnet:
    state: "present"
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ private_subnet_b_cidr }}"
    region: "{{ aws_region }}"
    az: "{{ aws_region }}b"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    resource_tags:
      Name: "Private Subnet B"
  register: private_subnet_b

- name: Output - Private Subnet B
  set_fact:
    private_subnet_b_id: "{{ private_subnet_b.subnet.id }}"

#Creating the internet gateway to allow internet access to the VPC
- name: Create - Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: "present"
  register: vpc_igw

- name: Output - IGW
  set_fact:
    igw_id: "{{ vpc_igw.gateway_id }}"


#NAT Gateways
#- name: Create - NAT A
  #community.aws.ec2_vpc_nat_gateway:
    #state: present
    #subnet_id: "{{ public_subnet_a_id }}"
    #wait: true
    #region: "{{ aws_region }}"
   # if_exist_do_not_create: true
  #register: nat_gateway_a

#- name: Output - NAT Gateway A
 # set_fact:
  #  nat_a_id: "{{ nat_a_id.gateway_id }}"

#- name: Create - NAT B.
 # community.aws.ec2_vpc_nat_gateway:
  #  state: present
   # subnet_id: "{{ public_subnet_b_id }}"
    #wait: true
    #region: "{{ aws_region }}"
    #if_exist_do_not_create: true
  #register: nat_gateway_b

#- name: Output - NAT Gateway B
 # set_fact:
  #  nat_b_id: "{{ nat_b_id.gateway_id }}"

# Route Tables
- name: Create - Public Subnet Route Table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    tags:
      Name: "Public"
    subnets:
      - "{{ public_subnet_a_id }}"
      - "{{ public_subnet_b_id }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ igw_id }}"

#- name: Create - Private Subnet A Route Table
  #ec2_vpc_route_table:
    #vpc_id: "{{ vpc_id }}"
    #region: "{{ aws_region }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    #tags:
     # Name: "Private A"
    #subnets:
     # - "{{ private_subnet_a_id }}"
    #routes:
      #- dest: "0.0.0.0/0"
        #gateway_id: "{{ nat_a_id }}"

#- name: Create - Private Subnet B Route Table
 # ec2_vpc_route_table:
  #  vpc_id: "{{ vpc_id }}"
   # region: "{{ aws_region }}"
    #aws_access_key: "{{ aws_access_key }}"
    #aws_secret_key: "{{ aws_secret_key }}"
    #tags:
     # Name: "Private B"
    #subnets:
     # - "{{ private_subnet_b_id }}"
    #routes:
     # - dest: "0.0.0.0/0"
        #gateway_id: "{{ nat_b_id }}"

# This section creates the security groups for public subnets. 
- name: Create - Public Security Group
  ec2_group:
    name: "SSH Access"
    description: "Allowing SSH traffic"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    rules:
      - proto: "tcp"
        from_port: "22"
        to_port: "22"
        cidr_ip: "{{ sg_ip }}/0"
  register: public_sg

- name: Output - Public Subnet Security Group 
  set_fact:
    public_sg_id: "{{ public_sg.group_id }}"

- name: Create - Private Security Group
  ec2_group:
    name: "Private Subnet Security Group"
    description: "Private Security Group"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    rules:
      - proto: "tcp"
        from_port: "22"
        to_port: "22"
        group_id: "{{ public_sg_id }}"
      - proto: "tcp"
        from_port: "80"
        to_port: "80"
        group_id: "{{ public_sg_id }}"
  register: private_sg

- name: Output - Private Subnet Security Group 
  set_fact:
    private_sg_id: "{{ private_sg.group_id }}"

